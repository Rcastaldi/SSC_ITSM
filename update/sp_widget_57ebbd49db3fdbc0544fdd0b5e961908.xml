<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category/>
        <client_script><![CDATA[function($scope, spUtil, $location,  $http, $interval, $timeout, $window, $log, $uibModal, $element ) {
	/* widget controller */
	var c = this;
	
	// This code is needed to set hide_toggle correctly when passing widget
	// options from the client script of another widget using spUtil.get
	// if there are default values configured in option schema
	// There seems to be an issue with options being initially set to default values
	// when embedding in another widget
	// This problem does not appear when passing options from server script using $sp.getWidget
	// or when opening in modal and passing options using spModal or $uibmodal
	if(c.options.hide_toggle == 'true') {
		c.options.hide_toggle_check = true;
	} else c.options.hide_toggle_check = false;
	//console.log('c.options Hide-header ' + c.options.hide_header);
	//console.log('c.options hide_toggle: ' + c.options.hide_toggle);
	//console.log('c.options hide_buttons: ' + c.options.hide_buttons);
	/* Above console logs used to identify options inconsistency
	Leaving here to come back and check behavior after future upgrades */	
	
	$scope.data.flagToServerScriptToCreateNewWorklog = false;		

	$scope.$on("$locationChangeSuccess", function(name, data) {
		if(c.options.embed_widget == 'true') {
			spUtil.update($scope);
			return;
		}
		var searchObject = $location.search();
		$scope.data.sys_id = searchObject.sys_id || searchObject.sl_sys_id;
		$scope.data.table = searchObject.table || searchObject.sl_table;
		spUtil.update($scope);	
	});
	
	$scope.hide_toggle_check = function() {
		if(c.options.hide_toggle == 'true')
		return 'hidden';
	}

	$scope.createWorklog = function(meeting) {
		$scope.data.flagToServerScriptToCreateNewWorklog = true;
		c.data.flagToServerScriptToCreateNewWorklog = true;		
		$scope.data.newWorklogDescription = meeting;
		$scope.data.newWorklogType = "MEETING-NOTES";
		c.server.update();
	}	

	/* Real-time ASync Updater by Ryan Castaldi				*/
	/* Version 2.0 Updated 08/22/2018									*/
	/* Adpated code for: SSC Worklog Buddy Widget			*/
	/* Goal is to move this code into a reusable			*/
	/* Anguler Directive															*/
	
	/* Variables ------------------------------------- */	
	$scope.data.currentEditRecord = "";
	$scope.data.currentWorklogCopy = ""
	$scope.data.mi_worklog = c.data.mi_worklog; //custom
	$scope.showNotification = false;
	$scope.data.toggleEdit = 'OFF';
	$scope.data.canUserEdit = c.data.canUserEdit;
	var unwatchWorkingCopy; //unmount for the working copy watcher
	var autosaveHttpPromise;
	var autosaveTimer, notificationTimer;
	
	/* Custom Code: SSC Worklog Buddy Widget ------------- */
	$scope.editWorklog = function(p_sys_id, p_worklog_description) {
		$scope.data.currentEditRecord = p_sys_id;
		$scope.data.currentWorklogCopy = p_worklog_description;
		//console.log(p_sys_id);
		//c.server.update();
	}
	$scope.toggleEdit = function(toggleP) {
		$scope.data.toggleEdit = toggleP;
		c.data.toggleEdit = toggleP;
		setupNotesMgmt();
		if(toggleP == 'OFF') {
			saveMeetingNotes();
			$scope.data.worklog.forEach(function(worklog){
				if(worklog.sys_id == $scope.data.currentEditRecord){
					worklog.description = $scope.data.currentWorklogCopy;
					$scope.data.recordUpdatedFlag = $scope.data.currentEditRecord;
				} 
			})
			$scope.data.currentEditRecord = "";
			//spUtil.update($scope);
			//c.server.update();			
		}		
		//console.log("toggle button clicked " + toggleP);		
	}

	/* Real-time ASync Updater Version 2.0 Code ------------- */
	
	//canEditMeetingNotes Starts the looping functions for autosave
	//added last check that user has access to edit record
	function canEditMeetingNotes() {
		if ($scope.data.toggleEdit == 'ON') {
			//console.log("Setting can edit meeting notes to " + $scope.data.canUserEdit);
			return $scope.data.canUserEdit; 
		} else {return false;}
	}
		
	function debounceNotification() {
		// if the animation is already in Queue, it means auto save triggered again
		// so we need to show the notification some more time
		if(notificationTimer)
			$timeout.cancel(notificationTimer);
		
		notificationTimer = $timeout(function() {
			$scope.showNotification = false;
			notificationTimer = undefined;
		}, 2000);
	}

	function onFinalizeSaveNotes(args,isErrorCall) {
		//console.log("onFinalizeSaveNotes");
		autosaveHttpPromise = null;
		if(autosaveTimer) {
			$timeout.cancel(autosaveTimer);
			autosaveTimer = null;
		}

		if(!isErrorCall) {
			if(!notificationTimer) {
				$scope.showNotification = true;
				debounceNotification();
			}
			else
				console.log("Error Call")
				debounceNotification();
		}
		/*
		case #1. before http call returns , user has typed more data.
		case #2. Due to network errors , we may not updated the notes content at backend.

		So if we call the "saveMeetingNotes" again, the above 2 cases get solved.
		we are giving some time . so that we don't hamper the browser.
		*/
		autosaveTimer = $timeout(function() {
			saveMeetingNotes();
		}, 1000, false);
	}

	function saveMeetingNotes() {
		//console.log("save meeting notes");
		// Concurrent update.  Don't save.
		if ($scope.editor.concurrentUpdate)
			return;
		// already saving is in-progress, go back.
		if(autosaveHttpPromise)
			return;

		// No changes, don't save.
		if ($scope.editor.savedCopy == $scope.editor.workingCopy)
			return;

		var prevSaved = $scope.editor.savedCopy;
		$scope.editor.savedCopy = $scope.editor.workingCopy;
		$scope.data.currentWorklogCopy = $scope.editor.workingCopy;
		// Push the saved copy to the server.
		var post = {'description': $scope.editor.savedCopy};
		$scope.data.worklogID = $scope.data.currentEditRecord;
		autosaveHttpPromise = $http.patch("/api/now/table/" + $scope.data.table + "/" + $scope.data.worklogID, post).then(
			onFinalizeSaveNotes,
			function(data) {
				$log.info("Failed save request, resetting savedCopy state");
				$scope.editor.savedCopy = prevSaved;
				//$scope.data.mi_worklog = c.data.mi_worklog;
				onFinalizeSaveNotes(data, true);
			}
		);
	}

	function resetMeetingNotes() {
		//console.log("resetMeetingNotes");
		$scope.editor = {			
			'workingCopy': $scope.data.currentWorklogCopy,
			'savedCopy':  $scope.data.currentWorklogCopy,
			'concurrentUpdate': false,
			'autosave': true
		};
	}

	function setupNotesMgmt() {
		// If it's changed to a state where we can now edit the notes.
		//console.log("setupNotesMgmt");
		if (canEditMeetingNotes()) {
			//console.log("setupNotesMgmt - canEditMeetingNotes");
			$scope.editor.savedCopy = $scope.editor.workingCopy = $scope.data.currentWorklogCopy; //Custom
			if (!unwatchWorkingCopy)
				unwatchWorkingCopy = $scope.$watch('editor.workingCopy',saveMeetingNotes);
		} else {

			if(autosaveTimer) {
				$timeout.cancel(autosaveTimer);
				autosaveTimer = null;
			}

			if (unwatchWorkingCopy) {
				unwatchWorkingCopy();
				unwatchWorkingCopy = null;
			}
		}
	}

	resetMeetingNotes(); 
	setupNotesMgmt();
	$scope.canEditMeetingNotes = canEditMeetingNotes;
	$scope.saveMeetingNotes = saveMeetingNotes;	
	/* End of Real-time ASync Updater Version 2.0 Code ------------- */
	
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.panel-body, .b {
  background: transparent;
  border: none;
  padding: 0;
  margin: 0;
}
.panel {
position: relative;
}
.panel-heading i {
  cursor: pointer;
  position: absolute;
  padding: 10px;
  top: 0px;
  right: 0px;  
}
.log-group-item {
  //padding: 5px;
  word-wrap: break-word;
}
.list-group-item:hover {
  // background-color: #86BBD1; // SSC Hover Color GEO
  background-color: #E1ECF2; // SSC Menu Hover MAE
}
.worklogDetail {
 padding-right: 0;
  padding-left: 0;
  border: 0;
}
/* Style for layout of large multi-line text used for --------- */
/* showing worklog description i.e. MI chronology */
.timeline-body &gt; p {
  white-space: pre-wrap;
  overflow-y:auto;overflow-x:hidden;
  max-height: 300px;
}
/* Text Section ------------ */
.fieldValue {
  padding-bottom: 10px;
}
.itals {font-style: italic;}
.execSummaryLabel {
  border-bottom: 1px solid; 
}
.label-primary {
  color:white;
  background: #0A2F5D
    padding: 10px 10px;
  border-radius: 5px;
  font-weight: bold;
}
.createNotes {
  width: 100%;
}
.glyphicon-info-sign {padding-right: 2px;}
.buttonGroup {
 padding-top: 20px; 
}
#cab_meeting_notes_notification {
	padding:5px 10px 5px 10px;
}
.row.no-gutter {
  margin-left: 0;
  margin-right: 0;
}
.row.no-gutter [class*='col-']:not(:first-child),
.row.no-gutter [class*='col-']:not(:last-child) {
  padding-right: 0;
  padding-left: 0;
}
.moduleTitle {
  color: white;
  margin-left: -10px;
}
.addTaskButton {
  fill:#fff;
  cursor: pointer;
  //border: 1px solid #fff !important;
  border-radius: 50%;
  padding: 1px;
  //padding-left: 4px;
  //padding-right: 4px;
}
.addTaskButton:hover {
  background-color:  #fff; 
  color: #007298; /* SSC Light Blue */
  fill: #007298 !important;
}
.addTaskButton:hover .cls-1 {
  fill: #007298 !important;
}
/* Real-time ASync Updater Version 2.0 CSS Code ------------- */
.editButton {
 margin: 0;
  margin-top: 0px; //-7px previos setting
  margin-right: 0px; //-7px previos setting
}
.notes_txt {
  width: 100%;
  height: 250px;
     -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */
     -moz-box-sizing: border-box;    /* Firefox, other Gecko */
     box-sizing: border-box;         /* Opera/IE 8+ */
}
.fade-in-out {
	-webkit-transition: opacity .3s linear;
	-moz-transition: opacity .3s linear;
	-o-transition: opacity .3s linear;
	-ms-transition: opacity .3s linear;
	transition: opacity .3s linear;
	opacity: 1;
	filter: alpha(opacity = 100);
}
.fade-in-out.ng-hide {
	opacity: 0;
	filter: alpha(opacity = 0);
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list>glyph,color,size</field_list>
        <has_preview>true</has_preview>
        <id>ssc-sp-widget-itsm-worklog-buddy</id>
        <internal>false</internal>
        <link/>
        <name>SSC Worklog Buddy</name>
        <option_schema>[{"name":"hide_header","label":"Hide Header","type":"boolean"},{"name":"hide_toggle","default_value":"true","label":"Hide Toggle","type":"boolean"},{"name":"hide_buttons","default_value":"","label":"Hide Buttons","type":"boolean"},{"name":"embed_widget","label":"Embed Widget","type":"boolean"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[/* Introduction --------------------- */
/*		e.g., data.table = $sp.getValue('table'); */
/* Widget Options ------------------- */
/*		title               =           */
/*		hide_header         =           */

(function() {
	/* populate the 'data' object */
	/* e.g., data.table = $sp.getValue('table'); */
	/* Server Script Variables --------- */
	// Flags used to decide if we need to show convencience
	// buttons to make meeting notes for 6:30, 8:00, and 8:30 meetings
	// sure hope the times dont change, or maybe replace with options <-ToDo->
	data.meetingNotesFound = false;	
	var newWorkLogSysId;
	data.toggleEdit = 'OFF';
	data.canUserEdit = false;
	var currentUser = gs.getUser();
	data.currentUserID = gs.getUserName();
	if(currentUser.isMemberOf('SSC-ETS-SMA') ||
		 currentUser.isMemberOf('IBM-SSM-MAJOR-INCIDENT-MGT') ||
		 currentUser.isMemberOf('SSC-ETS-PROBLEM-MGT') ||
		 currentUser.isMemberOf('IBM-SSM-PROBLEM-MGT')){
		data.canUserEdit = true;
	} else {
		data.canUserEdit = false;
	}

	//Check first if we have input, otherwise check URL and options for sys_id
	if (input) {
		if (input.flagToServerScriptToCreateNewWorklog == true){
			//console.log("I should create a " + input.newWorklogType +" record for " + input.sys_id);
			//console.log(input.newWorklogDescription);
			var grNewWorklog = new GlideRecord(input.table);
			grNewWorklog.initialize();
			grNewWorklog.parent = input.sys_id;
			grNewWorklog.u_choice_1 = input.newWorklogType; 
			grNewWorklog.short_description = input.newWorklogDescription; 
			newMiWorkLogSysId = grNewWorklog.insert();
			console.log("I created " + newWorkLogSysId);
			data.sys_id = input.sys_id;
			data.table = input.table || 'problem';  // problem is default;
			data.view = input.view;
			data.query = input.query;
		} else {
			data.table = input.table || 'problem';  // problem is default;
			data.sys_id = input.sys_id;
			data.view = input.view;
			data.query = input.query;
		}
	}
	else {

		data.table = options.table || $sp.getParameter("t") || $sp.getParameter("table") || $sp.getParameter("sl_table") || 'problem';  // problem is default
		data.sys_id = options.sys_id || $sp.getParameter("sys_id") || $sp.getParameter("sl_sys_id");
		data.view = options.view || $sp.getParameter("v") || $sp.getParameter("view") || 'problem';  // problem is default
		data.query = options.query || $sp.getParameter("query");
	}
	data.table = data.table || options.table || $sp.getParameter("t") || $sp.getParameter("table") || $sp.getParameter("sl_table") || 'problem';  // problem is default
	data.sys_id = data.sys_id || options.sys_id || $sp.getParameter("sys_id") || $sp.getParameter("sl_sys_id");
	data.view = options.view || $sp.getParameter("v") || $sp.getParameter("view") || 'problem';  // problem is default
	data.query = options.query || $sp.getParameter("query");
	// Setup options	
	data.hide_toggle = options.hide_toggle ;
	data.hide_buttons = options.hide_buttons;
	//console.log('hide_toggle: ' + data.hide_toggle);
	//console.log('hide_buttons: ' + data.hide_buttons);
	//Validate we have a sys_id else return
	data.isValid = data.sys_id;
	if (!data.isValid)
		return;
	// Determine table based on parent table input
	if(data.table == 'problem'){
		data.parentRecordClass = 'Problem';
		data.table = "u_" + data.table + "_worklog";
	} else if (data.table == 'incident') {
		data.parentRecordClass = 'Incident';
		data.table = "u_" + data.table + "_worklog";
	}


	// Get Worklog data from SSCwidgetScriptInclude by passing record sys_id and table
	data.worklog = [];
	var ssc_si = new SSCwidgetScriptInclude();
	data.worklog = ssc_si.getWorklog(data.sys_id, data.table);

	//Check if meeting notes exist else set flag for buttons to create

	data.worklog.forEach(function(worklog){		
		if(worklog.short_description.startsWith('Problem Initiation Meeting Notes')) data.meetingNotesFound = true;			 
	})

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>e448614</sys_created_by>
        <sys_created_on>2018-08-06 19:55:49</sys_created_on>
        <sys_id>57ebbd49db3fdbc0544fdd0b5e961908</sys_id>
        <sys_mod_count>278</sys_mod_count>
        <sys_name>SSC Worklog Buddy</sys_name>
        <sys_package display_value="State Street IT Service Management" source="x_ibmss_ssc_itsm">2a92e67fdb071740544fdd0b5e9619d7</sys_package>
        <sys_policy/>
        <sys_scope display_value="State Street IT Service Management">2a92e67fdb071740544fdd0b5e9619d7</sys_scope>
        <sys_update_name>sp_widget_57ebbd49db3fdbc0544fdd0b5e961908</sys_update_name>
        <sys_updated_by>e448614</sys_updated_by>
        <sys_updated_on>2018-10-11 17:44:37</sys_updated_on>
        <template><![CDATA[<h4 ng-class="hide_toggle_check()" class="moduleTitle" ng-init="worklog_variable_toggle=c.options.hide_toggle_check" ng-click="worklog_variable_toggle = !worklog_variable_toggle" style="cursor: pointer;">
  {{data.parentRecordClass}} Worklogs
  <i class="glyphicon" ng-class="{'glyphicon-chevron-down': worklog_variable_toggle, 'glyphicon-chevron-right': !worklog_variable_toggle}"></i>
</h4>
<div ng-if="worklog_variable_toggle">
  <div ng-if="data.isValid" class="panel panel-{{::c.options.color}} b">
    <div class="panel-heading" ng-if="::!c.options.hide_header">
      <h4 class="panel-title">      
        <span ng-if="c.options.glyph">
          <fa name="{{::c.options.glyph}}" />
        </span>{{::c.options.title}}</h4> 	
    </div> <!-- Heading Title Panel-->
    <div class="panel-group"> <!-- Main Panel Body-->

      <div class="row"> <!-- Row 1 -->
        <div class="col-xs-12"> <!-- Row 1 Column A -->

          <div ng-repeat="worklogs in data.worklog"> <!--
***** Main NG-Repeat ******
For each worklog item we repeat a list-group-item "worklogListItem" div that contains a "worklogDetail" div
that can be expanded using variable_toggle to show the worklog details. In the "worklogListItem" div we also
show an edit button "editButton" that will display if the item is not being editted AND the user is a member of
problem or major incident groups. It will not display for worklogs that the current user did not create or update
if they are not MEETING-NOTES. This is to allow all members of the problem teams to update all  MEETING-NOTES worklogs
but then only their own other worklogs.
-->          
            <div class="list-group-item worklogListItem" ng-init="variable_toggle=false" ng-click="variable_toggle = !variable_toggle" style="cursor: pointer;">
              <div class="row no-gutter">
                <!-- Edit Button -->              
                <button type="button" 
                        class="editButton btn btn-default pull-right" 
                        ng-if="data.toggleEdit == 'OFF' && 
                               data.canUserEdit == true &&
                               data.hide_buttons == false &&
                               (worklogs.type == 'MEETING-NOTES' ||
                               worklogs.sys_updated_by == data.currentUserID ||
                               worklogs.sys_created_by == data.currentUserID)"
                        ng-click="editWorklog(worklogs.sys_id, worklogs.description); toggleEdit('ON');">
                  <span class="glyphicon glyphicon-edit">
                  </span> 
                </button>              
                <i class="glyphicon" ng-class="{'glyphicon-chevron-down': variable_toggle, 'glyphicon-chevron-right': !variable_toggle}"></i>
                <label class="label label-primary">{{worklogs.type}}</label>
                {{worklogs.short_description}} <span ng-if="data.recordUpdatedFlag == worklogs.sys_id" class="m-n text-muted updatedRecord"> - *UPDATED*</span>
              </div>              
              <div class="list-group" ng-if="variable_toggle || data.currentEditRecord == worklogs.sys_id"> <!-- Worklog Detail -->
                <br/>
                <div ng-click="$event.stopPropagation()">
                  <div class="task-group-item worklogDetail">
                    <div class="row task_detail_row"> <!-- Worklog Detail Row -->
                      <div class="col-xs-4"> <!-- Row 1 Column A -->                        
                        <h6 class="m-n text-muted">
                          Worklog Number
                        </h6>
                        <div class="fieldValue">
                          {{worklogs.number}}
                        </div>                        
                      </div><!-- Row 1 Column A -->
                      <div class="col-xs-4"> <!-- Row 1 Column B -->
                        <h6 class="m-n text-muted">
                          Updated By
                        </h6>
                        <div class="fieldValue">
                          {{worklogs.sys_updated_by}} 
                        </div>                                   
                      </div> <!-- Row 1 Column B -->
                      <div class="col-xs-4"> <!-- Row 1 Column C -->
                        <h6 class="m-n text-muted">
                          Updated On
                        </h6><div class="fieldValue">
                        {{worklogs.sys_updated_on | date:'shortDate'}} 
                        </div>                                   
                      </div> <!-- Row 1 Column C -->
                      <div class="col-xs-12"> <!-- Row 1 Column D -->
                        <h6 class="m-n text-muted execSummaryh6">
                          Worklog Description
                        </h6>                      
                        <div ng-if="canEditMeetingNotes() && data.currentEditRecord == worklogs.sys_id">
                          <textarea class="notes_txt"  ng-model="editor.workingCopy" ng-model-options="{debounce:1000}"></textarea>
                          <input type='button' ng-if="data.toggleEdit == 'ON'" ng-click="toggleEdit('OFF')" class="btn btn-default" value="${Done Editing}"/>                        
                          <span id='cab_meeting_notes_notification' class="noSelect fade-in-out" ng-show="showNotification"> ${Meeting notes saved} </span>
                        </div>                                 
                        <div ng-if="worklogs.sys_id != data.currentEditRecord" class="fieldValue timeline-body">
                          <p>
                            {{worklogs.description}}
                          </p>
                        </div>            
                      </div> <!-- Row 1 Column D -->
                    </div> <!-- Task Detail Row -->
                  </div>
                </div>
              </div> <!-- Worklog Details -->
            </div>
          </div> <!-- Worklog ng-repeat -->

        </div> <!-- Row 1 Column A -->
      </div> <!-- Row 1 -->
      <div ng-if="data.canUserEdit == true && c.options.hide_buttons == false && data.parentRecordClass == 'Problem' && worklog_variable_toggle" class="list-group buttonGroup">
        <button ng-if="data.meetingNotesFound == false" ng-click="createWorklog('Problem Initiation Meeting Notes')" type="button" class="list-group-item">
          <span class="glyphicon glyphicon-info-sign alert-info"></span>Problem Initiation Meeting Notes not found - Click here to Create
        </button>
      </div>    
    </div> <!-- Main Panel Body -->  
  </div>
</div> <!-- Worklog Variable Toggle -->
]]></template>
    </sp_widget>
</record_update>
