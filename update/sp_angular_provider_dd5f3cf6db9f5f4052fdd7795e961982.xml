<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sp_angular_provider">
    <sp_angular_provider action="INSERT_OR_UPDATE">
        <name>sscRecordPicker</name>
        <script><![CDATA[function($timeout, $http, urlTools, filterExpressionParser, $sanitize, i18n) {
	"use strict";
	var cache = {};
		function cleanLabel(val) {
			if (typeof val == "object")
				return "";
			return typeof val == "string" ? val.trim() : val;
		}
		return {
			restrict: 'E',
			replace: true,
			scope: {
				field: '=',
				table: '=',
				defaultQuery: '=?',
				searchFields: '=?',
				valueField: '=?',
				displayField: '=?',
				displayFields: '=?',
				pageSize: '=?',
				onChange: '&',
				snDisabled: '=',
				multiple: '=?',
				options: '=?',
				placeholder: '@'
			},
			template: '<input type="text" ng-disabled="snDisabled" style="min-width: 150px;" name="{{field.name}}" ng-model="field.value" />',
				controller: function($scope) {
					if (!angular.isNumber($scope.pageSize))
						$scope.pageSize = 20;
					if (!angular.isDefined($scope.valueField))
						$scope.valueField = 'sys_id';
					this.filterResults = function(data, page) {
						return {
							results: data.data.result,
							more: (page * $scope.pageSize < parseInt(data.headers('x-total-count'), 10))
						};
					};
				},
				link: function(scope, element, attrs, ctrl) {
					var isExecuting = false;
					var select2Helpers = {
						formatSelection: function(item) {
							return $sanitize(getDisplayValue(item));
						},
						formatResult: function(item) {
							var displayFields = getdisplayFields(item);
							if (displayFields.length == 1)
								return $sanitize(cleanLabel(displayFields[0]));
							if (displayFields.length > 1) {
								var markup = $sanitize(displayFields[0]);
								var width = 100 / (displayFields.length - 1);
								markup += "<div>";
								for (var i = 1; i < displayFields.length; i++)
									markup += "<div style='width: " + width + "%;' class='select2-additional-display-field'>" + $sanitize(cleanLabel(displayFields[i]))  + "</div>";
								markup += "</div>";
								return markup;
							}
							return "";
						},
						search: function(queryParams) {
							//console.log(queryParams);
							/*
							var retObj = {$$state: {value: {data: {result: 
{
dependent_value: "",
   element: "u_root_cause_category",
   hint: "Change Management",
   inactive: "false",
   label: "Change Management",
   language: "en",
   name: "problem",
   sequence: "1",
   sys_created_by: "Gary.VanRoy@servicenow.com",
   sys_created_on: "2017-09-05 11:33:01",
   sys_domain: { },
   sys_domain_path: "/",
   sys_id: "773c7ac9db89430052fdd7795e9619c7",
   sys_mod_count: "6",
   sys_tags: "",
   sys_updated_by: "Gary.VanRoy@servicenow.com",
   sys_updated_on: "2017-12-14 00:15:07",
   value: "Change"
} 
																  }}}};
																  */
							if (scope.field.name == "group_name") {
								console.log("Group Name selected");
								//console.log(scope.$parent);
								//retObj.$$state.value.data.result = scope.$parent.data.groupsWithProblem;
								/*
								console.log(scope.$parent.data.groupsWithProblem);
								scope.$parent.data.groupsWithProblem.forEach(function(forEaProblem){
								console.log(forEaProblem);
								var forEaResult = {};								
								forEaResult.sys_id = forEaProblem.id.toString();
								forEaResult.name = forEaProblem.text.toString();
								retObj.$$state.value.data.result.push(forEaResult);
								});
								retObj.$$state.value.status = 200;
								retObj.$$state.value.statusText = "OK";
								console.log(retObj);
								return retObj;
								*/
							}
							if (scope.field.name == "root_cause_category") {
								console.log("Root Cause Category Selected");
								//console.log(retObj);
								//return retObj;
							}
							var url = '/api/now/table/' + scope.table + '?' + urlTools.encodeURIParameters(queryParams.data);
							if (scope.options && scope.options.cache && cache[url]) {
								return queryParams.success(cache[url]); }
							console.log($http.get(url));
							return $http.get(url).then(function(response) {
								if (scope.options && scope.options.cache) {
									cache[url] = response;
								}								
								return queryParams.success(response);
							});
							
							
						},
						initSelection: function(elem, callback) {
							if (scope.field.displayValue) {
								if (scope.multiple){
									var items = [], sel;
									var values = scope.field.value.split(',');
									var displayValues = scope.field.displayValue.split(',');
									for(var i=0; i<values.length; i++){
										sel = {};
											sel[scope.valueField] = values[i];
											sel[scope.displayField] = displayValues[i];
											items.push(sel);
										}
										callback(items);
									}
									else {
										var sel = {};
											sel[scope.valueField] = scope.field.value;
											sel[scope.displayField] = scope.field.displayValue;
											callback(sel);
										}
									} else
									callback([]);
								}
							};
							var config = {
								width : '100%',
								containerCssClass : 'select2-reference ng-form-element',
								placeholder : scope.placeholder || '    ',
								formatSearching: '',
									allowClear: (scope.options && typeof scope.options.allowClear !== "undefined") ? scope.options.allowClear : true,
								id: function(item) {
									return item[scope.valueField];
								},
								ajax: {
									quietMillis: NOW.ac_wait_time,
									data: function(filterText, page) {
										var params = {
											sysparm_offset: (scope.pageSize * (page - 1)),
											sysparm_limit: scope.pageSize,
											sysparm_query: buildQuery(filterText, scope.searchFields, scope.defaultQuery)
										};
										return params;
									},
									results: function(data, page) {
										return ctrl.filterResults(data, page, scope.pageSize);
									},
									transport: select2Helpers.search
								},
								formatSelection: select2Helpers.formatSelection,
									formatResult: select2Helpers.formatResult,
									formatResultCssClass: function(){ return ''; },
									initSelection: select2Helpers.initSelection,
									multiple: scope.multiple
								};
								function buildQuery(filterText, searchFields, defaultQuery) {
									var queryParts = [];
									var operator = "CONTAINS";
									if (filterText.startsWith("*"))
										filterText = filterText.substring(1);
									if (defaultQuery)
										queryParts.push(defaultQuery);
									var filterExpression = filterExpressionParser.parse(filterText, operator);
									if (searchFields != null) {
										var fields = searchFields.split(',');
										if (filterExpression.filterText != '') {
											var OR = "";
											for (var i = 0; i < fields.length; i++) {
												queryParts.push(OR + fields[i] + filterExpression.operator + filterExpression.filterText);
												OR = "OR";
											}
										}
										for (var i = 0; i < fields.length; i++)
											queryParts.push('ORDERBY' + fields[i]);
										queryParts.push('EQ');
									}
									return queryParts.join('^');
								}
								scope.field = scope.field || {};
									var initTimeout = null;
									var value = scope.field.value;
									var oldValue = scope.field.value;
									var $select;
									function init() {
										element.css("opacity", 0);
										$timeout.cancel(initTimeout);
										initTimeout = $timeout(function() {
											i18n.getMessage('Searching...', function(searchingMsg) {
												config.formatSearching = function() {
													return searchingMsg;
												};
											});
											element.css("opacity", 1);
											element.select2("destroy");
											$select = element.select2(config);
											$select.bind("change", onChanged);
											$select.bind("select2-removed", onChanged);
											$select.bind("select2-selecting", onSelecting);
											$select.bind("select2-removing", onRemoving);
											scope.$emit('select2.ready', element);
										});
									}
									function onSelecting(e) {
										isExecuting = true;
										oldValue = scope.field.value;
										var selectedItem = e.choice;
										if (scope.multiple && selectedItem[scope.valueField] != '') {
											var values = scope.field.value == '' ? [] : scope.field.value.split(',');
											var displayValues = scope.field.displayValue == '' ? [] : scope.field.displayValue.split(',');
											values.push(selectedItem[scope.valueField]);
											displayValues.push(getDisplayValue(selectedItem));
											scope.field.value = values.join(',');
											scope.field.displayValue = displayValues.join(',');
											e.preventDefault();
											$select.select2('val', values).select2('close');
											scope.$apply(function() {
												callChange(oldValue, e);
											});
										}
									}
									function onRemoving(e) {
										isExecuting = true;
										oldValue = scope.field.value;
										var removed = e.choice;
										if (scope.multiple){
											var values = scope.field.value.split(',');
											var displayValues = scope.field.displayValue.split(',');
											for(var i = values.length-1; i>=0; i--){
												if (removed[scope.valueField] == values[i]) {
													values.splice(i, 1);
													displayValues.splice(i, 1);
													break;
												}
											}
											scope.field.value = values.join(',');
											scope.field.displayValue = displayValues.join(',');
											e.preventDefault();
											$select.select2('val', scope.field.value.split(','));
											scope.$apply(function() {
												callChange(oldValue, e);
											});
										}
									}
									function callChange(oldValue, e) {
										var f = scope.field;
										var p = {
											field: f,
											newValue: f.value,
											oldValue: oldValue,
											displayValue: f.displayValue
										}
										scope.$emit("field.change", p);
										scope.$emit("field.change." + f.name, p);
										if (scope.onChange)
											try {
											scope.onChange(e);
										} catch(ex) {
											console.log("directive.snRecordPicker error in onChange")
											console.log(ex)
										}
										isExecuting = false;
									}
									function onChanged(e) {
										e.stopImmediatePropagation();
										if (scope.$$phase || scope.$root.$$phase) {
											console.warn('in digest, returning early');
											return;
										}
										if (e.added) {
											var selectedItem = e.added;
											if (!scope.multiple){
												scope.field.value = selectedItem[scope.valueField];
												if (scope.field.value) {
													scope.field.displayValue = getDisplayValue(selectedItem);
												} else
												scope.field.displayValue = '';
											}
										} else if (e.removed) {
											if (!scope.multiple) {
												scope.field.displayValue = '';
												scope.field.value = '';
											}
										}
										scope.$apply(function() {
											callChange(oldValue, e);
										});
									}
									function getDisplayValue(selectedItem) {
										var displayValue = selectedItem[scope.valueField];
										if (selectedItem) {
											if (scope.displayField && angular.isDefined(selectedItem[scope.displayField]))
												displayValue = selectedItem[scope.displayField];
											else if (selectedItem.name)
												displayValue = selectedItem.name;
											else if (selectedItem.title)
												displayValue = selectedItem.title;
										}
										return cleanLabel(displayValue);
									}
									function getdisplayFields(selectedItem) {
										var displayFields = [];
										if (selectedItem && selectedItem[scope.valueField]) {
											var current = "";
											if (scope.displayField && angular.isDefined(selectedItem[scope.displayField]))
												current = selectedItem[scope.displayField];
											else if (selectedItem.name)
												current = selectedItem.name;
											else if (selectedItem.title)
												current = selectedItem.title;
											displayFields.push(current);
										}
										if (scope.displayFields) {
											var columns = scope.displayFields.split(",");
											for (var i = 0; i < columns.length; i++) {
												var column = columns[i];
												if (selectedItem[column])
													displayFields.push(selectedItem[column]);
											}
										}
										return displayFields;
									}
									scope.$watch("field.value", function(newValue) {
										if (isExecuting) return;
											if (angular.isDefined(newValue) && $select) {
											if (scope.multiple)
												$select.select2('val', newValue.split(',')).select2('close');
											else
												$select.select2('val', newValue).select2('close');
										}
									});
									if (attrs.displayValue) {
										attrs.$observe('displayValue', function(value){
											scope.field.value = value;
										});
									}
									init();
								}
							};
						}]]></script>
        <sys_class_name>sp_angular_provider</sys_class_name>
        <sys_created_by>e448614</sys_created_by>
        <sys_created_on>2018-07-18 05:33:31</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>dd5f3cf6db9f5f4052fdd7795e961982</sys_id>
        <sys_mod_count>65</sys_mod_count>
        <sys_name>sscRecordPicker</sys_name>
        <sys_package display_value="State Street IT Service Management" source="x_ibmss_ssc_itsm">2a92e67fdb071740544fdd0b5e9619d7</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="State Street IT Service Management">2a92e67fdb071740544fdd0b5e9619d7</sys_scope>
        <sys_update_name>sp_angular_provider_dd5f3cf6db9f5f4052fdd7795e961982</sys_update_name>
        <sys_updated_by>e448614</sys_updated_by>
        <sys_updated_on>2018-07-18 09:39:31</sys_updated_on>
        <type>directive</type>
    </sp_angular_provider>
</record_update>
