<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <client_script><![CDATA[function($scope, $rootScope, spUtil, $sce, $http, spModal, glideUserSession, $location) {
	/* widget controller */
	var c = this;
	
$rootScope.$on("$locationChangeSuccess", function(name, data) {
	var searchObject = $location.search();
	$scope.data.sys_id = searchObject.sys_id || searchObject.sl_sys_id;
	spUtil.update($scope);
	});

	$scope.showMoreDetailsRecord = null;
	$scope.showRCADetailsRecord = null;
	$scope.showTaskDetailsRecord = null;
	$scope.isUserITIL = null;

	// Determine if current user has itil role
	glideUserSession.loadCurrentUser().then(function(currentUser) {
		$scope.isUserITIL = currentUser.hasRoleExactly('itil');
		return;
	});

	// this makes the UI wadtch the data tables and update on changes
	/*	spUtil.recordWatch($scope, "problem", "", function(name, data) {
		spUtil.update($scope);
	}); */

	// Functions used to hide or unhide certain elements per row based on current sys_id
	$scope.showMoreDetails = function(instance) {
		$scope.showMoreDetailsRecord = angular.copy(instance);	
	};
	$scope.hideMoreDetails = function(instance) {
		$scope.showMoreDetailsRecord = null;	
	};
	$scope.showRCAdetails = function(instance) {
		$scope.showRCADetailsRecord = angular.copy(instance);	
	};
	$scope.hideRCAdetails = function(instance) {
		$scope.showRCADetailsRecord = null;	
	};
	$scope.showTaskdetails = function(instance) {
		$scope.showTaskDetailsRecord = angular.copy(instance);	
	};
	$scope.hideTaskdetails = function(instance) {
		$scope.showTaskDetailsRecord = null;	
	};
	$scope.goToProblemForm = function(instance) {
		var linkESF = {};
		linkESF.sys_id = instance.sys_id;
		linkESF.table = 'problem';
		linkESF.id = 'ssc_sp_problem_form';
		$location.search(linkESF);
	};
	// Assign class based on value of field
	$scope.getPriorityClass = function(problem) {
		return "Priority" + problem.priority;
	};
	$scope.getMItypeClass = function(problem) {
		return problem.parent_inc_mi_type;
	};

}]]></client_script>
        <controller_as>c</controller_as>
        <css>.panel {&#13;
position: relative;&#13;
 &#13;
}&#13;
.panel-heading i {&#13;
  cursor: pointer;&#13;
  position: absolute;&#13;
  padding: 10px;&#13;
  top: 0px;&#13;
  right: 0px;  &#13;
}&#13;
&#13;
/* Table,th,tr,td Elements ------------------- */&#13;
table {&#13;
  width: 100%;&#13;
  border-radius: 10px;&#13;
  border-collapse: collapse;&#13;
  background-color: white;&#13;
  font-family: Arial, sans-serif;&#13;
  word-wrap: break-word;&#13;
  text-overflow: ellipsis;&#13;
}&#13;
th, td { padding: 10px; }&#13;
td { color: black; }&#13;
&#13;
/* Change default bootstrap behaviors -------------*/&#13;
//	Change Table Row Hover state collor to SSC Color &#13;
.table-hover tbody tr:hover td {&#13;
  background-color: #86BBD1; // SSC Hover Color GEO&#13;
}&#13;
&#13;
/* Table,th,tr,td Classes ------------------------ */&#13;
.problem_title {&#13;
  background-color:  #0A2F5D; /* SSC Blue */&#13;
  color: white;&#13;
  border: thick solid #0A2F5D; &#13;
  font-size: 20px;&#13;
}&#13;
.problem_title span {&#13;
	font-size: 16px; &#13;
  font-style: italic;&#13;
}&#13;
.moreDetailsRow, .problem_task_cat_header {&#13;
  background-color:  #007298; /* SSC Light Blue */&#13;
  color: white;&#13;
}&#13;
.problem_task_cat_header {font-weight: bold; font-size: 16px;}&#13;
.problem_task_list, .problem_task_list_item, .summaryTblCell {&#13;
  text-align: left;&#13;
  vertical-align: top;&#13;
}&#13;
.problem_task_list {padding: 0px;}&#13;
.itals {font-style: italic;}&#13;
.addBotmBrdr { border-bottom: thin solid gray; }&#13;
.addThickBlueBotmBrdr { border-bottom: thick solid #0A2F5D; }&#13;
.addThickBlueRightBrdr { border-right: thick solid #0A2F5D; }&#13;
.addThickBlueLeftBrdr { border-left: thick solid #0A2F5D; }&#13;
&#13;
/* Table,th,tr,td Named Elements --------- */&#13;
.problem_task_list_item, #incidentDetailTable td, #incidentDetailTable th, #incidentDetailTable tr {&#13;
  padding: 2px 4px 2px 4px;&#13;
}&#13;
/* ng-class section --------- */&#13;
.Major {&#13;
  color:white;&#13;
  padding: 10px 10px;&#13;
  font-weight: bold;&#13;
}&#13;
.Reportable { background: red }&#13;
.Qualified { background: #f56e00 }&#13;
.Process { background: #0A2F5D }&#13;
/* Style for layout of large multi-line text used for --------- */&#13;
/* showing worklog description i.e. MI chronology */&#13;
.timeline-body &gt; p {&#13;
  white-space: pre-wrap;&#13;
  overflow-y:scroll;overflow-x:hidden;&#13;
  max-height: 300px;&#13;
}&#13;
/* Button style section --------- */&#13;
button {&#13;
  // background-color:  #007298; /* SSC Light Blue */&#13;
  background-color:  #2F749A; /* SSC Primary Button CAL */&#13;
  border: 1px;&#13;
  color: white;&#13;
  padding: 10px 10px;&#13;
  text-align: center;&#13;
  text-decoration: none;&#13;
  display: inline-block;&#13;
  font-size: 16px;&#13;
  // border-radius: 15px;&#13;
  box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19);&#13;
}&#13;
button:hover {&#13;
  background-color: #E1ECF2; // SSC Hover ColorMAE&#13;
  color: #FFFFFF;&#13;
}&#13;
button#pressed { &#13;
  // background-color: #e4ecf0; color: #0A2F5D;&#13;
  background-color:  #092E5D; /* SSC Selected Button BEN */&#13;
  color: white;&#13;
}&#13;
/* ICON styles */&#13;
.fa-check-circle, .fa-calendar-check-o-active, .fa-calendar-check-o-warn, .fa-calendar-times-o, .fa-exclamation-circle {&#13;
  padding-left: 10px;&#13;
}&#13;
.fa-plus-square, .fa-minus-square { padding-right: 10px; }&#13;
.fa-calendar-times-o, .fa-exclamation-circle { color: red; }&#13;
.fa-calendar-check-o-active { color: #0A2F5D;}&#13;
.fa-calendar-check-o-warn { color: #f56e00;}&#13;
.fa-print { color: #007298;font-size:36px; padding-left: 15px; padding-right: 15px; }&#13;
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description>Problem Management Executive Summary Form Widget. Provides a consolidated view of a problem record, problem tasks, and parent incident. The sys_id of a valid problem records needs to be provided as a URL parameter.</description>
        <docs/>
        <field_list>glyph,color,size</field_list>
        <has_preview>true</has_preview>
        <id>ssc-sp-widget-exec-summ-form</id>
        <internal>false</internal>
        <link/>
        <name>SSC PBM Executive Summary Form</name>
        <option_schema>[{"name":"pbm_exec_summ_form_hide_header","label":"Hide Header","type":"boolean"},{"name":"pbm_es_form_title","label":"Title","type":"string"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	/* populate the 'data' object */
	/* Check for input from client script first, then URL parameters, then options */
	
	if (input) {
		data.table = input.table;
		data.sys_id = input.sys_id;
		data.view = input.view;
		data.query = input.query;
		}
	else {
	
		data.table = $sp.getParameter("t") || $sp.getParameter("table") || $sp.getParameter("sl_table") || options.table;
		data.sys_id = $sp.getParameter("sys_id") || $sp.getParameter("sl_sys_id") || options.sys_id;
		data.view = $sp.getParameter("v") || $sp.getParameter("view") || options.view || 'problem';  // problem is default
		data.query = $sp.getParameter("query") || options.query;
	 }
	//data.sys_id = 'baec204adb0f070081ee15ce3b96197f';
	data.problems = [];
	
	//var rec = $sp.getRecord('problem', data.sys_id);
	//data.isValid = rec.isValid();
	//if (!data.isValid)
	//	return;
	data.isValid = data.sys_id;
	
// Call main problem query
	var gr = new GlideRecord('problem');
	gr.addActiveQuery();
	// Add filter for opened by group = IBM-SSM-PROBLEM-MGT by group sys_id
	//gr.addQuery('u_opened_by_group', 'IN','5408d3a8db200b40047dd7795e9619b5');
	//gr.addQuery('sys_id', 'baec204adb0f070081ee15ce3b96197f');
	gr.get('sys_id', data.sys_id)
	gr.setLimit(10);
	gr.orderByDesc('sys_created_on');
	gr.query();
	
	// Perform loop through each record returned by main problem query
	while(gr.next()) {
		// Create multi-dimensional array variable local to function
		// for storing fields for each record
		var problem = {'problem_tasks':[], 'incident_worklogs':[]};
		problem.number = gr.getDisplayValue('number');
		problem.short_description = gr.getDisplayValue('short_description');
		problem.sys_id = gr.getUniqueValue();
		problem.sys_updated_on = gr.getValue('sys_updated_on');
		problem.priority = gr.getDisplayValue('priority');
		problem.assignment_group = gr.getDisplayValue('assignment_group');
		problem.description = gr.getValue('description');
		problem.parent = gr.getDisplayValue('parent');
		problem.state = gr.getDisplayValue('state');
		problem.u_root_cause_category = gr.getDisplayValue('u_root_cause_category');
		problem.u_root_cause_owner = gr.getDisplayValue('u_root_cause_owner');
		problem.cmdb_ci = gr.getDisplayValue('cmdb_ci');
		problem.symptom = gr.getDisplayValue('u_symptom');
		problem.cause = gr.getDisplayValue('u_root_cause');
		problem.resolution = gr.getDisplayValue('u_permanent_resolution');
		problem.u_why_1 = gr.getDisplayValue('u_why_1');
		problem.u_why_2 = gr.getDisplayValue('u_why_2');
		problem.u_why_3 = gr.getDisplayValue('u_why_3');
		problem.u_why_4 = gr.getDisplayValue('u_why_4');
		problem.u_why_5 = gr.getDisplayValue('u_why_5');
		problem.u_response_1 = gr.getDisplayValue('u_response_1');
		problem.u_response_2 = gr.getDisplayValue('u_response_2');
		problem.u_response_3 = gr.getDisplayValue('u_response_3');
		problem.u_response_4 = gr.getDisplayValue('u_response_4');
		problem.u_response_5 = gr.getDisplayValue('u_response_5');
		console.log(problem.number);
		// New query joining problem_task on problem field to problem sys_id
		var gr2 = new GlideRecord('problem_task');
		gr2.addQuery('problem', gr.getUniqueValue());
		gr2.setLimit(25);
		gr2.orderByDesc('sys_updated_on');
		gr2.query();
		// Perform loop through each record returned by problem task query
		while(gr2.next()) {
			// local function array variable for storing each problem task fields
			var problem_task = {};
			// local function date variable for formatting date
			//var task_due_date = new GlideDateTime(gr2.getValue('due_date'));
			var task_work_end_date = new GlideDateTime(gr2.getValue('work_end'));
			var task_due_date = gr2.getValue('due_date');
			problem_task.number = gr2.getDisplayValue('number');
			problem_task.short_description = gr2.getDisplayValue('short_description');
			problem_task.sys_id = gr2.getUniqueValue();
			problem_task.sys_updated_on = gr2.getValue('sys_updated_on');
			problem_task.assignment_group = gr2.getDisplayValue('assignment_group');
			problem_task.description = gr2.getValue('description');
			problem_task.parent = gr2.getDisplayValue('problem');
			problem_task.state = gr2.getDisplayValue('state');
			// Logic for calculating current state of task and provide due or end date
			if (gr2.getDisplayValue('state') == "Closed" ||  gr2.getDisplayValue('state') == "Not Required") {
				problem_task.state_calc = "Completed";
				problem_task.date_calc = task_work_end_date.getNumericValue();
			} 
			else if (!task_due_date) {
				problem_task.state_calc = "NoDate";
					problem_task.date_calc = "Due date not set";
			}
			else {
				task_due_date = new GlideDateTime(task_due_date);
				var gdt1 = new GlideDateTime().getLocalDate().getDisplayValueInternal();
				gdt1 = new GlideDateTime(gdt1 + " 00:00:00");
				var gdt2 = task_due_date.getDate();
				gdt2 = new GlideDateTime(gdt2 + " 00:00:00");
				var dur = GlideDateTime.subtract(gdt1, gdt2);
				var when_to_warn = new GlideDateTime();

				when_to_warn.addDaysLocalTime(7);			

				// logic to replace null value if target date is empty
				if (task_due_date.getNumericValue() == 0) {
					problem_task.state_calc = "NoDate";
					problem_task.date_calc = "Due date not set";
				} 
				else if (gdt2.before(gdt1)){
					problem_task.state_calc = "PastDue";
					problem_task.date_calc = task_due_date.getNumericValue();
				}
				else if (gdt2.before(when_to_warn)){
					problem_task.state_calc = "Warn";
					problem_task.date_calc = task_due_date.getNumericValue();
				}
				else {
					problem_task.state_calc = "Active";
					problem_task.date_calc = task_due_date.getNumericValue();
					problem_task.date_test = when_to_warn.getDisplayValue();
				}
			}
			problem_task.u_problem_task_category = gr2.getDisplayValue('u_problem_task_category');
			// Push each problem task to local function array
			problem.problem_tasks.push(problem_task);
		}
		// New query joining incident on parent to problem sys_id
		var gr3 = new GlideRecord('incident');
		gr3.addQuery('problem_id', gr.getUniqueValue());
		gr3.setLimit(1);
		gr3.orderByDesc('sys_updated_on');
		gr3.query();
		// Perform loop through incident or incidents returned by query
		while(gr3.next()) {
			problem.parent_inc_number = gr3.getDisplayValue('number');
			problem.parent_inc_short_description = gr3.getDisplayValue('short_description');
			problem.parent_inc_description = gr3.getValue('description');
			problem.parent_inc_mi_type = gr3.getDisplayValue('u_mi_type');
			problem.parent_inc_symptom = gr3.getDisplayValue('u_symptom');
			problem.parent_inc_cause = gr3.getDisplayValue('u_cause');
			problem.parent_inc_resolution = gr3.getDisplayValue('close_notes');
			problem.parent_inc_owner_group = gr3.getDisplayValue('u_owner_group');
			problem.parent_inc_created = gr3.getDisplayValue('sys_created_on');
			problem.parent_inc_duration = gr3.getDisplayValue('calendar_duration');
			problem.parent_inc_region = gr3.getDisplayValue('u_region');
			problem.parent_inc_business_unit = gr3.getDisplayValue('u_business_unit');
			problem.parent_inc_resolved = gr3.getDisplayValue('resolved_at');
			problem.parent_inc_state = gr3.getDisplayValue('state');
			// New query joining incident worklog on parent to incident sys_id
			// and contains CHRONOLOGY to return MI Timeline
			var gr4 = new GlideRecord('u_incident_worklog');
			gr4.addQuery('parent', gr3.getUniqueValue());
			gr4.addQuery('u_choice_1','CONTAINS', 'CHRONOLOGY');
			gr4.setLimit(10);
			gr4.orderByDesc('sys_updated_on');
			gr4.query();
			// Perform loop through worklog or worklogs returned by query
			while(gr4.next()) {
				// // local function array variable for storing each incident worklog record
				var incident_worklog = {};
				incident_worklog.parent_inc_wklg_number = gr4.getDisplayValue('number');
				incident_worklog.parent_inc_wklg_short_description = gr4.getDisplayValue('short_description');
				incident_worklog.parent_inc_wklg_description = gr4.getValue('description');
				incident_worklog.parent_inc_wklg_type = gr4.getDisplayValue('u_choice_1');
				incident_worklog.parent_inc_wklg_updated_on = gr4.getDisplayValue('sys_updated_on');
				incident_worklog.parent_inc_wklg_updated_by = gr4.getDisplayValue('sys_updated_by');
				//Push each incident worklog to local function array
				problem.incident_worklogs.push(incident_worklog);
			}
		}
		// Push local function array to data array
		data.problems.push(problem);
	}

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>e448614</sys_created_by>
        <sys_created_on>2018-07-09 06:33:49</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>52d7fab3db871740544fdd0b5e9619a7</sys_id>
        <sys_mod_count>9</sys_mod_count>
        <sys_name>SSC PBM Executive Summary Form</sys_name>
        <sys_package display_value="State Street IT Service Management" source="x_ibmss_ssc_itsm">2a92e67fdb071740544fdd0b5e9619d7</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="State Street IT Service Management">2a92e67fdb071740544fdd0b5e9619d7</sys_scope>
        <sys_update_name>sp_widget_52d7fab3db871740544fdd0b5e9619a7</sys_update_name>
        <sys_updated_by>e448614</sys_updated_by>
        <sys_updated_on>2018-07-09 11:53:33</sys_updated_on>
        <template><![CDATA[<div class="panel panel-{{::c.options.color}} b">
  <div class="panel-heading" ng-if="::!c.options.pbm_exec_summ_form_hide_header">
    <h4 class="panel-title">      
      <span ng-if="c.options.glyph">
        <fa name="{{::c.options.glyph}}" />
      </span>{{::c.options.pbm_es_form_title}}</h4>  	
  </div> <!-- Heading Title Panel-->
  <div ng-if="!data.isValid" class="panel panel-default">
  <div class="panel-body wrapper-lg text-center">
    ${Record not found}
  </div>
</div>
  <div id="main-form-panel" ng-if="data.isValid" class="panel-body"> <!-- Main Panel Body-->
    <div class="main-form">
  <!-- MainRepeatTable -->
  <table id="MainRepeatTable" ng-repeat="problem in data.problems">
    <col width="10%"> <col width="40%"> <col width="10%"> <col width="40%">
    <tr>
      <th class="problem_title" colspan="4">        
        <span class="ticket_numbers">
          ({{problem.parent}} / {{problem.number}})
        </span>
        {{problem.short_description}}
      </th>
    </tr> <!-- Problem Title Row -->
    <tr>
      <td class="addThickBlueLeftBrdr addThickBlueRightBrdr addThickBlueBotmBrdr summaryTblCell" colspan="2"> 
        <table> <!-- Summary Table -->
          <tr>
            <th>Major Incident Type:</th>
            <td><span ng-class="getMItypeClass(problem)">{{problem.parent_inc_mi_type}}</span></td>
          </tr>
          <tr>
            <th>Problem State:</th>
            <td>{{problem.state}}</td>
          </tr>
          <tr>
            <th>Problem CI:</th>
            <td>{{problem.cmdb_ci}}</td>
          </tr>
          <tr>
            <th>Problem Owner:</th>
            <td>{{problem.assignment_group}}</td>
          </tr>
          <tr>
            <th>Root Cause Owner, Category:</th>
            <td>{{problem.u_root_cause_owner}}, {{problem.u_root_cause_category}}</td>
          </tr>
          <tr>
            <th class="addBotmBrdr" colspan="2">Executive Summary:</th>
          </tr>
          <td colspan="2"> {{problem.description}}
          </td>
        </table> <!-- end of summary table  -->
      </td> <!-- Problem Summary Fields -->
      <td class="problem_task_list addThickBlueRightBrdr addThickBlueBotmBrdr" colspan="2" width="50%"> 
        <table class=" table-hover"> <!-- tasks_table -->
          <tr>
            <th class="problem_task_cat_header">Causal Determination Tasks</th>
          </tr><tbody>
          <tr ng-repeat="problem_task in problem.problem_tasks | filter: {'u_problem_task_category' : 'CDT - Causal Determination Task'} | limitTo: 10">
            <td class="problem_task_list_item addBotmBrdr" ng-if="problem_task.sys_id != showTaskDetailsRecord.sys_id" ng-click="showTaskdetails(problem_task)">
              <i class="glyphicon glyphicon-chevron-right"></i> <!-- <i class="fa fa-plus-square"></i> -->
              {{problem_task.short_description}} ({{problem_task.assignment_group}}) ({{problem_task.state}}) ({{problem_task.date_calc | date:'shortDate'}})
              <!-- {{problem_task.state_calc}} {{problem_task.date_test}} -->
              <i ng-if="problem_task.state_calc == 'Completed'" class="fa fa-check-circle"></i>
              <i ng-if="problem_task.state_calc == 'PastDue'" class="fa fa-exclamation-circle"></i>
              <i ng-if="problem_task.state_calc == 'Active'" class="fa fa-calendar-check-o-active"></i>
              <i ng-if="problem_task.state_calc == 'Warn'" class="fa fa-calendar-check-o-warn"></i>
              <i ng-if="problem_task.state_calc == 'NoDate'" class="fa fa-calendar-times-o"></i>
            </td>
            <td class="problem_task_list_item addBotmBrdr" ng-if="problem_task.sys_id == showTaskDetailsRecord.sys_id" ng-click="hideTaskdetails(problem_task)">
              <i class="fa fa-chevron-down"></i> <!-- <i class="fa fa-plus-square"></i> -->
              {{problem_task.short_description}} ({{problem_task.assignment_group}}) ({{problem_task.state}}) ({{problem_task.date_calc | date:'shortDate'}}) 
              <!-- {{problem_task.state_calc}} {{problem_task.date_test}} -->
              <i ng-if="problem_task.state_calc == 'Completed'" class="fa fa-check-circle"></i>
              <i ng-if="problem_task.state_calc == 'PastDue'" class="fa fa-exclamation-circle"></i>
              <i ng-if="problem_task.state_calc == 'Active'" class="fa fa-calendar-check-o-active"></i>
              <i ng-if="problem_task.state_calc == 'Warn'" class="fa fa-calendar-check-o-warn"></i>
              <i ng-if="problem_task.state_calc == 'NoDate'" class="fa fa-calendar-times-o"></i>
              <table ng-if="problem_task.sys_id == showTaskDetailsRecord.sys_id"> <!-- summary table of CDT task -->
                <tr>
                  <td class="problem_task_list_item problem_task_list_th">Task Number:</td>
                  <td class="problem_task_list_item">{{problem_task.number}}</td>
                </tr>
                <tr>
                  <td class="problem_task_list_item problem_task_list_th" colspan="2">Task Description:</td>
                </tr>
                <td class="problem_task_list_item" colspan="2"> {{problem_task.description}}
                </td>
              </table> <!-- end of summary table of CDT task -->
            </td>
          </tr></tbody>
          <tr>
            <th class="problem_task_cat_header">Risk Remediation Tasks</th>
          </tr><tbody>
          <tr ng-repeat="problem_task in problem.problem_tasks | filter: {'u_problem_task_category' : 'RRT - Risk Remediation Task'} | limitTo: 10">
            <td class="problem_task_list_item addBotmBrdr" ng-if="problem_task.sys_id != showTaskDetailsRecord.sys_id" id="task_list_td" ng-click="showTaskdetails(problem_task)">
              <i class="fa fa-chevron-right"></i> <!-- <i class="fa fa-plus-square"></i> -->              
              {{problem_task.short_description}} ({{problem_task.assignment_group}}) ({{problem_task.state}}) ({{problem_task.date_calc | date:'shortDate'}})
              <!-- {{problem_task.state_calc}} {{problem_task.date_test}} -->
              <i ng-if="problem_task.state_calc == 'Completed'" class="fa fa-check-circle"></i>
              <i ng-if="problem_task.state_calc == 'PastDue'" class="fa fa-exclamation-circle"></i>
              <i ng-if="problem_task.state_calc == 'Active'" class="fa fa-calendar-check-o-active"></i>
              <i ng-if="problem_task.state_calc == 'Warn'" class="fa fa-calendar-check-o-warn"></i>
              <i ng-if="problem_task.state_calc == 'NoDate'" class="fa fa-calendar-times-o"></i>
            </td>
            <td class="problem_task_list_item addBotmBrdr" ng-if="problem_task.sys_id == showTaskDetailsRecord.sys_id" ng-click="hideTaskdetails(problem_task)">
              <i class="fa fa-chevron-down"></i> <!-- <i class="fa fa-plus-square"></i> --> 
              {{problem_task.short_description}} ({{problem_task.assignment_group}}) ({{problem_task.state}}) ({{problem_task.date_calc | date:'shortDate'}})
              <!-- {{problem_task.state_calc}} {{problem_task.date_test}} -->
              <i ng-if="problem_task.state_calc == 'Completed'" class="fa fa-check-circle"></i>
              <i ng-if="problem_task.state_calc == 'PastDue'" class="fa fa-exclamation-circle"></i>
              <i ng-if="problem_task.state_calc == 'Active'" class="fa fa-calendar-check-o-active"></i>
              <i ng-if="problem_task.state_calc == 'Warn'" class="fa fa-calendar-check-o-warn"></i>
              <i ng-if="problem_task.state_calc == 'NoDate'" class="fa fa-calendar-times-o"></i>
              <table ng-if="problem_task.sys_id == showTaskDetailsRecord.sys_id"> <!-- summary table of RRT task -->
                <tr>
                  <td class="problem_task_list_item problem_task_list_th">Task Number:</td>
                  <td class="problem_task_list_item">{{problem_task.number}}</td>
                </tr>
                <tr>
                  <td class="problem_task_list_item problem_task_list_th" colspan="2">Task Description:</td>
                </tr>
                <td class="problem_task_list_item" colspan="2"> {{problem_task.description}}
                </td>
              </table> <!-- end of summary table of CDT task -->
            </td>             
          </tr></tbody>
        </table> <!-- end of tasks_table -->
      </td> <!-- Problem Tasks -->
    </tr> <!-- Problem Summary Fields and Tasks Row -->
    <tr> 
      <td colspan="4" class="addThickBlueLeftBrdr addThickBlueRightBrdr addThickBlueBotmBrdr">
        <button ng-if="problem.sys_id != showMoreDetailsRecord.sys_id" ng-click="showMoreDetails(problem)">
          <i class="fa fa-plus-square"></i>Show More Incident Details</button>
        <button id="pressed" ng-if="problem.sys_id == showMoreDetailsRecord.sys_id" ng-click="hideMoreDetails(problem)">
          <i class="fa fa-minus-square"></i>Hide More Incident Details</button>
        <button ng-if="problem.sys_id != showRCADetailsRecord.sys_id" ng-click="showRCAdetails(problem)">
          <i class="fa fa-plus-square"></i>Show RCA Details</button>
        <button id="pressed" ng-if="problem.sys_id == showRCADetailsRecord.sys_id" ng-click="hideRCAdetails(problem)">
          <i class="fa fa-minus-square"></i>Hide RCA Details</button>
        
        <button ng-if="isUserITIL" ng-click="goToProblemForm(problem)">Open in Problem Ticket Form</button>
        
        <!--
        <button ng-click="ConnectFollowWidget.follow(problem)">Follow Problem Record</button>
        <i class="fa fa-print"></i>
        -->
      </td>
    </tr> <!-- Button Row -->
    <tr ng-if="problem.sys_id == showMoreDetailsRecord.sys_id">
      <th class="problem_task_cat_header addThickBlueLeftBrdr addThickBlueRightBrdr" colspan="4">More Incident Details</th>
    </tr> <!-- More Incident Details Title Row -->
    <tr ng-if="problem.sys_id == showMoreDetailsRecord.sys_id" class="moreDetailsRow addThickBlueLeftBrdr addThickBlueRightBrdr addThickBlueBotmBrdr"> 
      <td colspan="4">
        <table id="incidentDetailTable"> <!-- Incident Detail Table -->
          <col width="20%">
          <col width="30%">
          <col width="20%">
          <col width="30%">
          <tr>
            <th>Incident Number:</th>
            <td>{{problem.parent}}</td>
            <th>Incident Created:</th>
            <td>{{problem.parent_inc_created}}</td>
          </tr>
          <tr>
            <th>Incident State:</th>
            <td>{{problem.parent_inc_state}}</td>
            <th>Incident Resolved:</th>
            <td>{{problem.parent_inc_resolved}}</td>
          </tr>
          <tr>
            <th>Region, Business Unit:</th>
            <td>{{problem.parent_inc_region}}, {{parent_inc_business_unit}}</td>
            <th>Incident Duration:</th>
            <td>{{problem.parent_inc_duration}}</td>                      
          </tr>
          <tr>
            <th class="addBotmBrdr" colspan="4">Incident Description:</th>
          </tr>
          <td colspan="4">{{problem.parent_inc_description}}</td>
          <tr>
            <th class="addBotmBrdr" colspan="4">Incident Symptom:</th>
          </tr>
          <td colspan="4" >{{problem.parent_inc_symptom}}</td>
          <tr>
            <th class="addBotmBrdr" colspan="4">Incident Cause:</th>
          </tr>
          <td colspan="4">{{problem.parent_inc_cause}}</td>
          <tr>
            <th class="addBotmBrdr" colspan="4">Incident Resolution:</th>
          </tr>
          <td colspan="4">{{problem.parent_inc_resolution}}</td>
          <tr>
            <th class="addBotmBrdr" colspan="4">Major Incident Chronology:</th>
          </tr>
          <td colspan="4">
            <tr ng-repeat="incident_worklog in problem.incident_worklogs |  limitTo: 5"> 
              <td  id="summary_header_td" colspan="4">
                <div class="timeline-body">
                  <p>
                    {{incident_worklog.parent_inc_wklg_description}}
                  </p> 
                </div>
                <p></p><p>
                <span class="itals">
                  {{incident_worklog.parent_inc_wklg_type}} updated on {{incident_worklog.parent_inc_wklg_updated_on}}
                  by {{incident_worklog.parent_inc_wklg_updated_by}}
                </span>
                </p>
              </td>
            </tr>
          </td>
        </table> <!-- end of Incident Detail Table -->
      </td>
    </tr> <!-- More Incident Details Row -->
    <tr ng-if="problem.sys_id == showRCADetailsRecord.sys_id" class="addThickBlueLeftBrdr"> 
      <th colspan="4" class="problem_task_cat_header addThickBlueRightBrdr">RCA Details</th>
    </tr> <!-- RCA Details Title Row -->
    <tr ng-if="problem.sys_id == showRCADetailsRecord.sys_id" class="moreDetailsRow addThickBlueLeftBrdr addThickBlueRightBrdr addThickBlueBotmBrdr">
      <td colspan="4">
        <table> <!-- rca_table -->
          <th width="10%">Symptom</th>
          <td colspan="3">{{problem.symptom}}</td>
          <tr> 
            <th width="10%"></th>
            <th>Why</th>
            <th>Response</th>
          </tr>
          <tr class="addBotmBrdr">
            <th width="10%" rowspan="5">5 Why's</th>
            <td>{{problem.u_why_1}}</td><td>{{problem.u_response_1}}</td>
          </tr>
          <tr class="addBotmBrdr">
            <td>{{problem.u_why_2}}</td><td>{{problem.u_response_2}}</td>
          </tr>
          <tr class="addBotmBrdr">
            <td>{{problem.u_why_3}}</td><td>{{problem.u_response_3}}</td>
          </tr>
          <tr class="addBotmBrdr">
            <td>{{problem.u_why_4}}</td><td>{{problem.u_response_4}}</td>
          </tr>
          <tr>
            <td class="addBotmBrdr">{{problem.u_why_5}}</td><td class="addBotmBrdr">{{problem.u_response_5}}</td>
          </tr>
          <tr>
            <th>Cause</th>
            <td colspan="3">{{problem.cause}}</td>
          </tr>
          <tr>
            <th>Resolution</th>
            <td colspan="3">{{problem.resolution}}</td>
          </tr>
        </table> <!-- end of rca_table -->
      </td>
    </tr> <!-- RCA Details Row -->
    <tr id="spacerow">
    <td colspan="4"> </td>
    </tr> <!-- Space Row -->
      </table> <!-- end of MainRepeatTable-->
    </div>   <!-- Main Form -->
  </div> <!-- Main Panel Body -->
</div>]]></template>
    </sp_widget>
</record_update>
